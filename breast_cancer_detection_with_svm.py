# -*- coding: utf-8 -*-
"""Breast_Cancer_Detection SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EZ7RWLV2Aya5F1zPoffyJU-hZdXgdog9
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.applications import VGG16
from tensorflow.keras.models import Model
from tensorflow.keras.models import save_model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.svm import SVC
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
import os

# Step 1: Data Collection
benign_dir = '/content/dataset/benign'
malignant_dir = '/content/dataset/malignant'

# Step 2: Preprocessing
def load_images_from_directory(directory):
    images = []
    for filename in os.listdir(directory):
        if filename.endswith('.png'):
            img = cv2.imread(os.path.join(directory, filename))
            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY).astype(np.float32)  # Convert to grayscale and set data type to 32-bit float
            img = cv2.resize(img, (224, 224))  # Resize to a standard size
            img = img / 255.0  # Normalize pixel values
            images.append(img)
    return images

benign_images = load_images_from_directory(benign_dir)
malignant_images = load_images_from_directory(malignant_dir)

# Step 3: Feature Extraction
base_model = VGG16(weights='imagenet', include_top=False)

# Define a function to preprocess and prepare the images for feature extraction
def preprocess_images(images):
    preprocessed_images = []
    for image in images:
        image_rgb = cv2.cvtColor(image, cv2.COLOR_GRAY2BGR)
        image_rgb = cv2.resize(image_rgb, (224, 224))
        image_rgb = image_rgb / 255.0
        preprocessed_images.append(image_rgb)
    return np.array(preprocessed_images)

# Extract features
benign_features = base_model.predict(preprocess_images(benign_images))
malignant_features = base_model.predict(preprocess_images(malignant_images))

# Create labels
benign_labels = [0] * len(benign_features)
malignant_labels = [1] * len(malignant_features)

# Combine features and labels
X = np.concatenate((benign_features, malignant_features), axis=0)
y = np.array(benign_labels + malignant_labels)

# Step 4: Data Splitting
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Flatten the feature vectors
X_train_flat = X_train.reshape(X_train.shape[0], -1)
X_test_flat = X_test.reshape(X_test.shape[0], -1)

# Step 5: Classification Model
svm_classifier = SVC(kernel='linear')
svm_classifier.fit(X_train_flat, y_train)

# Step 6: Evaluation
y_pred = svm_classifier.predict(X_test_flat)
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print(report)

# Step 7: Export the Model as H5 file
model_filename = 'BreastCancerSVM.h5'
save_model(svm_classifier, model_filename)